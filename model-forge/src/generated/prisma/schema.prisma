generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SequentialModel {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  enabled Boolean @default(true)
  public  Boolean @default(false)
  userId  String // Clerk user ID

  layers    Layer[]           @relation("ModelLayers")
  versions  ModelVersion[]
  trainings TrainingSession[]

  @@unique([name, userId])
}

model Layer {
  id              Int             @id @default(autoincrement())
  modelId         String          @db.Uuid
  sequentialModel SequentialModel @relation("ModelLayers", fields: [modelId], references: [id])
  type            String
  config          Json
  order           Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  fromConnections LayerConnection[] @relation("FromLayer")
  toConnections   LayerConnection[] @relation("ToLayer")
}

model LayerConnection {
  id          Int @id @default(autoincrement())
  fromLayerId Int
  toLayerId   Int

  fromLayer Layer @relation("FromLayer", fields: [fromLayerId], references: [id])
  toLayer   Layer @relation("ToLayer", fields: [toLayerId], references: [id])
}

model ModelVersion {
  id        Int      @id @default(autoincrement())
  modelId   String   @db.Uuid
  version   Int
  snapshot  Json
  createdAt DateTime @default(now())

  model SequentialModel @relation(fields: [modelId], references: [id])
}

model TrainingSession {
  id        Int      @id @default(autoincrement())
  modelId   String   @db.Uuid
  status    String // "completed", "failed", "in_progress"
  metrics   Json?
  cost      Float?   @default(0.0)
  createdAt DateTime @default(now())

  model SequentialModel @relation(fields: [modelId], references: [id])
}
